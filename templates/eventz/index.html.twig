{% extends 'base.html.twig' %}

{% block title %}Hello EventzController!{% endblock %}

{% block body %}
    <nav>
      <div class="heading">
        <h4>GameNightZ</h4>
      </div>
      <ul class="nav-links">
        <li><a class="active-page" href="/">Home</a></li>
        <li><a href="/aboutuz">AboutUz</a></li>
        <li><a href="/eventz">Evenz</a></li>
        <li><a href="/locationz">Locationz</a></li>
        <li><a href="/faq">FAQ</a></li>
        <li><a href="/login">LogIn</a></li>
      </ul>
    </nav>
    <div class="extras-container"> <!-- Create Event Button und Filter -->
      <div class="create-event-button" onclick="openCreateEvent()">
        <div class="create-event-text button-text">
          Add Event
        </div>
      </div>
      <div class="filter-event-container">
        <input type="text" class="filter-event-input" placeholder="filter tags: 'minecraft, league of legends, csgo'" onchange="loadEventsWithTags()" oninput="loadEventsWithTags()">
      </div>
    </div>
    <div class="calendar-container"> <!-- Alles was mit den Event-karten zu tun hat --> <!-- ----- HIER NICHTS ÄNDERN!!! ----- -->
      <div class="calendar-empty"> <!-- wird angezeigt wenn keine Events geplant sind-->
        Es sind zurzeit keine Events geplant
      </div>
      <!-- <div class="year-container" data-year="year2023">
        <div class="month-container" data-month="month0">
          <div class="month-title">
            Januar 2023
          </div>
          <div class="month-content">
            <div class="event-entry" data-id="0" onclick="openEventDetails(this)">
              <img src="../Images/Image1.jpg">
              <div class="event-content">
                1. Januar 2023<br>
                Titel
              </div>
            </div>
          </div>
        </div>
      </div> -->
    </div>
    <div class="event-details-container">
      <div class="event-details-title">
        Titel
      </div>
      <div class="event-details-date">
        Datum
      </div>
      <div class="event-details-time">
        Uhrzeit
      </div>
      <div class="event-details-cancel-button" onclick="closeEventDetails()">
        X
      </div>
      <div class="event-details-book-button" onclick="bookEvent()">
        <div class="button-text">
          Book Event
        </div>
      </div>
    </div>
    <div class="create-event-container">
      <div class="create-event-title-container">
        <div class="create-event-title-text">
          Titel:
        </div>
        <input class="create-event-title-input" type="text" required>
      </div>
      <div class="create-event-date-container">
        <div class="create-event-date-text">
          Datum:
        </div>
        <input class="create-event-date-input" type="date" required>
      </div>
      <div class="create-event-time-container">
        <div class="create-event-time-text">
          Uhrzeit:
        </div>
        <input class="create-event-time-input" type="time" required>
      </div>
      <div class="create-event-cancel-button" onclick="closeCreateEvent()">
        X
      </div>
      <div class="create-event-save-button" onclick="saveEventEntries()">
        <div class="create-event-save-text button-text">
          Save
        </div>
      </div>
    </div>
    <div class="Footer_outer">
    <div class="Footer_inner_left"> <br><strong>Vertreten durch:</strong><br>Max Muster <br>
      Musterweg<br>
      12345 Musterstadt <br></div>
    <div class="Footer_inner_right"> <br><strong>Kontakt:</strong> <br>
      Telefon: 01234-789456<br>
      Fax: 1234-56789<br>
      E-Mail: <a href='mailto:max@muster.de'>max@muster.de</a><br>

      <a href="../Impressum/Impressum.html">Impressum</a></li>
    </div>
  </div>
        
  <script>
  let allEvents = [];
  let allBookings = []; // Alle Events die der angemeldete Benutzer gebucht hat
  const allMonths = ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"];

  loadAllEvents();
  
  // Event details

  let _currentOpenEvent;

  function openEventDetails(_eventEntry)
  {
    closeCreateEvent();
    let _eventDetailContainer = document.querySelector(".event-details-container");
    _eventDetailContainer.style.display = "block";
    for (let _event of allEvents)
    {
      if (_event.id == _eventEntry.attributes["data-id"].value)
      {
        _currentOpenEvent = _event;
        break;
      }
    }
    _eventDetailContainer.querySelector(".event-details-title").innerHTML = _currentOpenEvent.title;
    _eventDetailContainer.querySelector(".event-details-date").innerHTML = _currentOpenEvent.dateToString();
    _eventDetailContainer.querySelector(".event-details-time").innerHTML = _currentOpenEvent.timeToString();
  }

  function bookEvent()
  {
    //datenbank eintrag
    // mit _currentOpenEvent
  }

  function closeEventDetails()
  {
    _currentOpenEvent = null;
    document.querySelector(".event-details-container").style.display = "none";
  }

  // Create Event

  function openCreateEvent()
  {
    closeEventDetails();
    document.querySelector(".create-event-container").style.display = "block"
  }

  function saveEventEntries()
  {
    let _title = document.querySelector(".create-event-title-input").value;
    _date = [document.querySelector(".create-event-date-input").value.split("-")[2], document.querySelector(".create-event-date-input").value.split("-")[1], document.querySelector(".create-event-date-input").value.split("-")[0]];
    _time = [document.querySelector(".create-event-time-input").value.split(":")[0], document.querySelector(".create-event-time-input").value.split(":")[1]];
    if (_title != "" && _date[0] != null && _date[1] != null && _date[2] != null && _time[0] != null && _time[1] != null)
    {
      _date = [parseInt(_date[0]), parseInt(_date[1]), parseInt(_date[2])];
      _time = [parseInt(_time[0]), parseInt(_time[1])];
      createEvent(_title, _date, _time);
      closeCreateEvent();
    }
  }

  function closeCreateEvent()
  {
    document.querySelector(".create-event-container").style.display = "none";
  }

  function createEvent(_title, _date, _time, _tags)
  {
    allEvents.push(new Event(_title, _date, _time, _tags)); // fügt das Event dem Event-array hinzu
    // löscht alle Events, die älter "heute" sind
    let _currentDate = new Date();
    for (let _i = allEvents.length - 1; _i >= 0; _i--)
    {
      if (allEvents[_i].date[2] < _currentDate.getFullYear() || (allEvents[_i].date[2] == _currentDate.getFullYear() && allEvents[_i].date[1] - 1 < _currentDate.getMonth()) || (allEvents[_i].date[2] == _currentDate.getFullYear() && allEvents[_i].date[1] - 1 == _currentDate.getMonth() && allEvents[_i].date[0] < _currentDate.getDate())) allEvents.splice(_i, 1);
    }
    // sortiert die Events (nach Datum) aufsteigend
    allEvents.sort(function(a, b)
    {
      if (a.date[2] != b.date[2]) return a.date[2] - b.date[2];
      else if (a.date[1] != b.date[1]) return a.date[1] - b.date[1];
      else if (a.date[0] != b.date[0]) return a.date[0] - b.date[0];
      else if (a.time[0] != b.time[0]) return a.time[0] - b.time[0];
      else if (a.time[1] != b.time[1]) return a.time[1] - b.time[1];
      else return 0;
    });
    loadAllEvents();
  }

  // anzeigen

  function loadAllEvents()
  {
    document.querySelector(".calendar-container").innerHTML = ""; // löscht alle Events (auf der Website) - Events sind aber noch im Array gespeichert
    for (let _event of allEvents)
    {
      addEvent(_event);
    }
    if (allEvents.length == 0) document.querySelector(".calendar-container").innerHTML = "<div class=\"calendar-empty\">Es sind zurzeit keine Events geplant</div>";
  }

  function loadEventsWithTags()
  {
    document.querySelector(".calendar-container").innerHTML = ""; // löscht alle Events (auf der Website) - Events sind aber noch im Array gespeichert
    let _eventsMatch = [];
    let _currentFilter = document.querySelector(".filter-event-input").value.split(",");
    if (_currentFilter[0] == "")
    {
      loadAllEvents();
      return;
    }
    for (let _event of allEvents)
    {
      for (let _eventTag of _event.tags)
      {
        for (let _filterTag of _currentFilter)
        {
          _filterTag = _filterTag.trim();
          if (!_eventsMatch.includes(_event) && _eventTag.toLowerCase().includes(_filterTag.toLowerCase())) _eventsMatch.push(_event);
        }
      }
    }
    for (let _event of _eventsMatch)
    {
      addEvent(_event);
    }
    if (_eventsMatch.length == 0) document.querySelector(".calendar-container").innerHTML = "<div class=\"calendar-empty\">Es wurden keine Events mit dieser Auswahl gefunden</div>";
  }

  function addEvent(_event) // fügt die Event-karte dem HTML-dokument zu
  {
    addYear(_event.date);
    addMonth(_event.date);
    document.querySelector("[data-year=\"year" + _event.date[2].toString() + "\"]").querySelector("[data-month=\"month" + (_event.date[1] - 1).toString() + "\"]").querySelector(".month-content").innerHTML += _event.getHtml();
  }

  function addMonth(_date) // fügt neuen Monat (in dem Jahr aus "_date") hinzu (Titel und Feld für Event-karten)
  {
    if (!document.querySelector("[data-year=\"year" + _date[2].toString() + "\"]").querySelector("[data-month=\"month" + (_date[1] - 1).toString() + "\"]")) document.querySelector("[data-year=\"year" + _date[2].toString() + "\"]").innerHTML += "<div class=\"month-container\" data-month=\"month" + (_date[1] - 1).toString() + "\"><div class=\"month-title\">" + allMonths[_date[1] - 1] + " " + _date[2] + "</div><div class=\"month-content\"></div></div>";
  }

  function addYear(_date) // fügt neues Jahr hinzu (Feld für Monate)
  {
    if (!document.querySelector("[data-year=\"year" + _date[2].toString() + "\"]")) document.querySelector(".calendar-container").innerHTML += "<div class=\"year-container\" data-year=\"year" + _date[2].toString() + "\"></div>";
  }

  // Datenbank

  function getAllEvents()
  {
    
  }

  function saveAllEvents()
  {

  }

  // Class Event

  class Event
  {
    constructor(_title, _date, _time)
    {
      this.id = 0;
      this.title = _title;
      this.date = _date; // [day, month, year]
      this.time = _time; // [hour, minute]
      this.tags = [];
      this.imagePath = this.getEventImagePath();
      this.html;
    }
    getHtml() // der HTML code für diese Event-karte
    {
      return "<div class=\"event-entry\" data-id=\"" + this.id + "\" onclick=\"openEventDetails(this)\"><img src=" + this.imagePath + "><div class=\"event-content\">" + this.dateToString() + "<br>" + this.title + "</div>";
    }
    dateToString()
    {
      return (this.date[0].toString() + ". " + allMonths[this.date[1] - 1] + " " + this.date[2].toString());
    }
    timeToString()
    {
      return (((this.time[0].toString().length == 2) ? this.time[0] : ("0" + this.time[0].toString())) + ":" + ((this.time[1].toString().length == 2) ? this.time[1] : ("0" + this.time[1].toString())));
    }
    tagsToString()
    {
      let _tagString = "";
      for (let _i = 0; _i < this.tags; _i++)
      {
        _tagString = _tagString + ((_i > 0) ? ", " : "") + this.tags[_i];
      }
      return _tagString;
    }
    getEventImagePath()
    {
      switch (this.title)
      {
        case "GameNight":
          return "../Images/Image1.jpg";
        default:
          return "../Images/Image1.jpg";
      }
    }
  }
  </script>

{% endblock %}






{# <nav>
      <div class="heading">
        <h4>GameNightZ</h4>
      </div>
      <ul class="nav-links">
        <li><a class="active-page" href="/">Home</a></li>
        <li><a href="/aboutuz">AboutUz</a></li>
        <li><a href="/eventz">Evenz</a></li>
        <li><a href="/locationz">Locationz</a></li>
        <li><a href="/faq">FAQ</a></li>
        {% if app.user %}
            {% if 'ROLE_USER' in app.user.getRoles() %}
                <li><a href="/userz">UserZ</a></li>
                {% endif %}
            {% endif %}
        <li><a href="/login">LogIn</a></li>
      </ul>
    </nav>
<h1>EvenZ</h1>

    <table class="table">
        <thead>
            <tr>
                
                <th>Name</th>
                <th>Slots</th>
                <th>AgeRating</th>
                <th>DateAndTime</th>
                <th>Describtion</th>
                <th>FeaturedGames</th>
               
            
                
                
            </tr>
        </thead>
        <tbody>
        {% for game_night in game_nights %}
            <tr>
                
                <td>{{ game_night.name }}</td>
                <td>{{ game_night.slots }}</td>
                <td>{{ game_night.ageRating }}</td>
                <td>{{ game_night.dateAndTime ? game_night.dateAndTime|date('Y-m-d H:i:s') : '' }}</td>
                <td>{{ game_night.describtion }}</td>
                <td>
                    {% if game_night.games != null %}
                     {% for games in game_night.games %} 

                    {{ games.name}} 
                    {% endfor %}
                    
                    {% endif %}
                </td>
                <td> </td>
                
                
                    
                    
                
            </tr>
        {% else %}
            <tr>
                <td colspan="7">no records found</td>
            </tr>
        {% endfor %}
        </tbody>
    </table>
    <div class="Footer_outer">
    <div class="Footer_inner_left"> <br><strong>Vertreten durch:</strong><br>Max Muster <br>
      Musterweg<br>
      12345 Musterstadt <br></div>
    <div class="Footer_inner_right"> <br><strong>Kontakt:</strong> <br>
      Telefon: 01234-789456<br>
      Fax: 1234-56789<br>
      E-Mail: <a href='mailto:max@muster.de'>max@muster.de</a><br>

      <a href="../Impressum/Impressum.html">Impressum</a></li>
    </div>
  </div>#}